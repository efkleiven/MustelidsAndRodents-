
    model{
    
    ###########################################
    ### Spatial Dynamic Co-Occurrence Model ###
    ###########################################
    # State 1= Unoccupied(U), State 2= rodent(A), State 3 = mustelid(B), State 4 = rodent & mustelid(AB)  
    ########################################### 
   
    ##############
    ##  Priors  ##    
    ##############
    
    # site parameters
    #gamA  ~ dunif(0,1)
    #gamB  ~ dunif(0,1)
    #gamAB ~ dunif(0,1)
    #gamBA ~ dunif(0,1)
    #epsA  ~ dunif(0,1)
    #epsB  ~ dunif(0,1)
    #epsAB ~ dunif(0,1)
    #epsBA ~ dunif(0,1)
    
    # block parameters
    #GamA  ~ dunif(0,1)
    #GamB  ~ dunif(0,1)
    #GamAB ~ dunif(0,1)
    #GamBA ~ dunif(0,1)
    #EpsA  ~ dunif(0,1)
    #EpsB  ~ dunif(0,1)
    #EpsAB ~ dunif(0,1)
    #EpsBA ~ dunif(0,1)
    
    # interscept det prob
    for(i in 1:2){
      beta1[i]  ~ dunif(0,1) 
      beta2[i]  ~ dunif(0,1)
      beta3[i]  ~ dunif(0,1) 
      beta4[i]  ~ dunif(0,1)
      beta5[i]  ~ dunif(0,1) 
      beta6[i]  ~ dunif(0,1)
      beta7[i]  ~ dunif(0,1) 
      beta8[i]  ~ dunif(0,1)
      beta9[i]  ~ dunif(0,1) 
      beta10[i] ~ dunif(0,1)
      beta11[i] ~ dunif(0,1) 
      beta12[i] ~ dunif(0,1)
      beta13[i] ~ dunif(0,1) 
      beta14[i] ~ dunif(0,1)
      beta15[i] ~ dunif(0,1) 
      beta16[i] ~ dunif(0,1)
    
      beta0_gamA[i]  <- logit(beta1)
      beta0_gamAB[i] <- logit(beta2)
      beta0_gamB[i]  <- logit(beta3)
      beta0_gamBA[i] <- logit(beta4)
    
      beta0_epsA[i]  <- logit(beta5)
      beta0_epsAB[i] <- logit(beta6)
      beta0_epsB[i]  <- logit(beta7)
      beta0_epsBA[i] <- logit(beta8)
    
      beta0_GamA[i]  <- logit(beta9)
      beta0_GamAB[i] <- logit(beta10)
      beta0_GamB[i]  <- logit(beta11)
      beta0_GamBA[i] <- logit(beta12)
    
      beta0_EpsA[i]  <- logit(beta13)
      beta0_EpsAB[i] <- logit(beta14)
      beta0_EpsB[i]  <- logit(beta15)
      beta0_EpsBA[i] <- logit(beta16)
      }
      
    # interscept det prob
    alpha1 ~ dunif(0,1) 
    alpha2 ~ dunif(0,1)
    
    alphaA0 <- logit(alpha1)
    alphaB0 <- logit(alpha2)
    
  # initial state parameters
    for(b in 1:nblock){
    for(i in 1:3){
    psi[b,i] ~ dunif(0,0.5) # site
    }
  
    # First season probabilities for each state
    #site    
    for(j in 1:nsite){
    fsm[j, b, 1] <- 1-psi[b,1]-psi[b,2]-psi[b,3]  #-----------|U
    fsm[j, b, 2] <- psi[b,1]                      #-----------|A
    fsm[j, b, 3] <- psi[b,2]                      #-----------|B
    fsm[j, b, 4] <- psi[b,3]                      #-----------|AB

    
    # first season latent state
    # for sites   
      z[j, b, 1] ~ dcat( fsm[j, b, ( 1:nout )])    # site 
    } # end site loop
    
    # for block, which is just a function of the states of the sites within each block
   
     x[b,1] <- ifelse(sum(z[,b,1]==1) == nsite, 1,
                ifelse(sum(z[,b,1]==2) + sum(z[,b,1]==1) == nsite, 2,
                  ifelse(sum(z[,b,1]==3) + sum(z[,b,1]==1) == nsite, 3, 4) ) )
    
    } # end block loop

    ###############################################
    # btpm = block transition probability matrix. #
    # All columns sum to 1.                       #
    ###############################################
    
    for(b in 1:nblock){
    # U to ...
    btpm[b, 1, 1] <- (1-GamA[b]) * (1-GamB[b])    #--|U
    btpm[b, 2, 1] <- GamA[b] * (1-GamB[b])        #--|A
    btpm[b, 3, 1] <- (1-GamA[b]) * GamB[b]        #--|B
    btpm[b, 4, 1] <- GamA[b] * GamB[b]            #--|AB
    
    # A to ...
    btpm[b, 1, 2] <- EpsA[b] * (1-GamBA[b])       #--|U
    btpm[b, 2, 2] <- (1-EpsA[b]) * (1-GamBA[b])   #--|A
    btpm[b, 3, 2] <- EpsA[b] * GamBA[b]           #--|B
    btpm[b, 4, 2] <- (1-EpsA[b]) * GamBA[b]       #--|AB
    
    # B to ...
    btpm[b, 1, 3] <- (1-GamAB[b]) * EpsB[b]       #--|U
    btpm[b, 2, 3] <- GamAB[b] * EpsB[b]           #--|A
    btpm[b, 3, 3] <- (1-GamAB[b]) * (1-EpsB[b])   #--|B
    btpm[b, 4, 3] <- GamAB[b] * (1-EpsB[b])       #--|AB
    
    # AB to ..
    btpm[b, 1, 4] <- EpsAB[b] * EpsBA[b]          #--|U
    btpm[b, 2, 4] <- (1-EpsAB[b]) * EpsBA[b]      #--|A
    btpm[b, 3, 4] <- EpsAB[b] * (1-EpsBA[b])      #--|B
    btpm[b, 4, 4] <- (1-EpsAB[b]) * (1-EpsBA[b])  #--|AB


      
    ####################################################
    ## stpm = site transition probability matrix.     ##
    ## These are dependent on the block level state   ##
    ## All columns sum to 1.                          ##
    ####################################################
 
   for(j in 1:nsite){
   
    # blocks state (x) = U
    
    # U to ...
    stpm[b, j, 1, 1, 1] <- 1          #--|U
    stpm[b, j, 2, 1, 1] <- 0          #--|A
    stpm[b, j, 3, 1, 1] <- 0          #--|B
    stpm[b, j, 4, 1, 1] <- 0          #--|AB
    
    # A to ...
    stpm[b, j, 1, 2, 1] <- 1          #--|U
    stpm[b, j, 2, 2, 1] <- 0          #--|A
    stpm[b, j, 3, 2, 1] <- 0          #--|B
    stpm[b, j, 4, 2, 1] <- 0          #--|AB
    
    # B to ...
    stpm[b, j, 1, 3, 1] <- 1           #--|U
    stpm[b, j, 2, 3, 1] <- 0           #--|A
    stpm[b, j, 3, 3, 1] <- 0           #--|B
    stpm[b, j, 4, 3, 1] <- 0           #--|AB
    
    # AB to ..
    stpm[b, j, 1, 4, 1] <- 1           #--|U
    stpm[b, j, 2, 4, 1] <- 0           #--|A
    stpm[b, j, 3, 4, 1] <- 0           #--|B
    stpm[b, j, 4, 4, 1] <- 0           #--|AB

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # blocks state (x) = A
  
# U to ...
    stpm[b, j, 1, 1, 2] <- (1-gamA[b, j])    #--|U
    stpm[b, j, 2, 1, 2] <- gamA[b, j]        #--|A
    stpm[b, j, 3, 1, 2] <- 0           #--|B
    stpm[b, j, 4, 1, 2] <- 0           #--|AB
    
    # A to ...
    stpm[b, j, 1, 2, 2] <- epsA[b, j]        #--|U
    stpm[b, j, 2, 2, 2] <- (1-epsA[b, j])    #--|A
    stpm[b, j, 3, 2, 2] <- 0           #--|B
    stpm[b, j, 4, 2, 2] <- 0           #--|AB
    
    # B to ...
    stpm[b, j, 1, 3, 2] <- (1-gamAB[b, j])   #--|U
    stpm[b, j, 2, 3, 2] <- gamAB[b, j]       #--|A
    stpm[b, j, 3, 3, 2] <- 0           #--|B
    stpm[b, j, 4, 3, 2] <- 0           #--|AB
    
    # AB to ..
    stpm[b, j, 1, 4, 2] <- epsAB[b, j]       #--|U
    stpm[b, j, 2, 4, 2] <- (1-epsAB[b, j])   #--|A
    stpm[b, j, 3, 4, 2] <- 0           #--|B
    stpm[b, j, 4, 4, 2] <- 0           #--|AB

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # blocks state (x) = B
 
# U to ...
    stpm[b, j, 1, 1, 3] <-  (1-gamB[b, j])    #--|U
    stpm[b, j, 2, 1, 3] <- 0            #--|A
    stpm[b, j, 3, 1, 3] <-  gamB[b, j]        #--|B
    stpm[b, j, 4, 1, 3] <- 0            #--|AB
    
    # A to ...
    stpm[b, j, 1, 2, 3] <- (1-gamBA[b, j])    #--|U
    stpm[b, j, 2, 2, 3] <- 0            #--|A
    stpm[b, j, 3, 2, 3] <- gamBA[b, j]       #--|B
    stpm[b, j, 4, 2, 3] <- 0            #--|AB
    
    # B to ...
    stpm[b, j, 1, 3, 3] <-  epsB[b, j]        #--|U
    stpm[b, j, 2, 3, 3] <- 0            #--|A
    stpm[b, j, 3, 3, 3] <- (1-epsB[b, j])     #--|B
    stpm[b, j, 4, 3, 3] <- 0            #--|AB
    
    # AB to ..
    stpm[b, j, 1, 4, 3] <-  epsBA[b, j]       #--|U
    stpm[b, j, 2, 4, 3] <- 0            #--|A
    stpm[b, j, 3, 4, 3] <-  (1-epsBA[b, j])   #--|B
    stpm[b, j, 4, 4, 3] <- 0            #--|AB

 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 # blocks state (x) = AB
 
# U to ...
    stpm[b, j, 1, 1, 4] <- (1-gamA[b, j]) * (1-gamB[b, j])    #--|U
    stpm[b, j, 2, 1, 4] <- gamA[b, j]  * (1-gamB[b, j])       #--|A
    stpm[b, j, 3, 1, 4] <- (1-gamA[b, j]) * gamB[b, j]        #--|B
    stpm[b, j, 4, 1, 4] <- gamA[b, j] * gamB[b, j]            #--|AB
    
    # A to ...
    stpm[b, j, 1, 2, 4] <- epsA[b, j] * (1-gamBA[b, j])       #--|U
    stpm[b, j, 2, 2, 4] <- (1-epsA[b, j]) * (1-gamBA[b, j])   #--|A
    stpm[b, j, 3, 2, 4] <- epsA[b, j] * gamBA[b, j]           #--|B
    stpm[b, j, 4, 2, 4] <- (1-epsA[b, j]) * gamBA[b, j]       #--|AB
    
    # B to ...
    stpm[b, j, 1, 3, 4] <- (1-gamAB[b, j] ) * epsB[b, j]      #--|U
    stpm[b, j, 2, 3, 4] <- gamAB[b, j]  * epsB[b, j]          #--|A
    stpm[b, j, 3, 3, 4] <- (1-gamAB[b, j] ) * (1-epsB[b, j])  #--|B
    stpm[b, j, 4, 3, 4] <- gamAB[b, j]  * (1-epsB[b, j])      #--|AB
    
    # AB to ..
    stpm[b, j, 1, 4, 4] <- epsAB[b, j] * epsBA[b, j]          #--|U
    stpm[b, j, 2, 4, 4] <- (1-epsAB[b, j]) * epsBA[b, j]      #--|A
    stpm[b, j, 3, 4, 4] <- epsAB[b, j] * (1-epsBA[b, j])      #--|B
    stpm[b, j, 4, 4, 4] <- (1-epsAB[b, j]) * (1-epsBA[b, j])  #--|AB
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Logit links for col and ext probabilities

    logit(gamA[b, j])  <- beta0_gamA[hab[b, j]] 
    logit(gamAB[b, j]) <- beta0_gamAB[hab[b, j]] 
    logit(gamB[b, j])  <- beta0_gamB[hab[b, j]] 
    logit(gamBA[b, j]) <- beta0_gamBA[hab[b, j]] 
 
    logit(epsA[b, j])  <- beta0_epsA[hab[b, j]] 
    logit(epsAB[b, j]) <- beta0_epsAB[hab[b, j]] 
    logit(epsB[b, j])  <- beta0_epsB[hab[b, j]]
    logit(epsBA[b, j]) <- beta0_epsBA[hab[b, j]] 

    logit(GamA[b, j])  <- beta0_GamA[hab[b, j]] 
    logit(GamAB[b, j]) <- beta0_GamAB[hab[b, j]] 
    logit(GamB[b, j])  <- beta0_GamB[hab[b, j]] 
    logit(GamBA[b, j]) <- beta0_GamBA[hab[b, j]] 
 
    logit(EpsA[b, j])  <- beta0_EpsA[hab[b, j]] 
    logit(EpsAB[b, j]) <- beta0_EpsAB[hab[b, j]] 
    logit(EpsB[b, j])  <- beta0_EpsB[hab[b, j]] 
    logit(EpsBA[b, j]) <- beta0_EpsBA[hab[b, j]]
    } # close site loop
  } # close block loop
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    # latent block state for the rest of the seasons
    for(t in 1:(nseason-1)){
      for(b in 1:nblock){
        x[b, t+1] ~ dcat(btpm[(1:nout), x[b, t]])

      # latent site state for the rest of the seasons
      for(j in 1:nsite){
        z[j, b, t+1] ~ dcat( stpm[( 1:nout ) , z[ j, b, t], x[b,t+1]] + 0.01)  # +0.01 to avoide giving the dcat a prob of 0 
       
          for(day in 1:nsurvey) {      
            y[j, b, t, day] ~ dcat( dpm[t, ( 1:nout ) , z[j, b, t]] + 0.01)  # +0.01 to avoide giving the dcat a prob of 0 
          } #end survey loop
        } # end site loop
      } # end block loop

    
    #############################################################
    ## detection matrix (OS = observed state, TS = true state) ##
    #############################################################
    
    # TS = U
    dpm[t, 1, 1] <- 1                      #--|OS = U
    dpm[t, 2, 1] <- 0                      #--|OS = A
    dpm[t, 3, 1] <- 0                      #--|OS = B
    dpm[t, 4, 1] <- 0                      #--|OS = AB
    
    # TS = A
    dpm[t, 1, 2] <- 1-pA[t]                #--|OS = U
    dpm[t, 2, 2] <- pA[t]                  #--|OS = A
    dpm[t, 3, 2] <- 0                      #--|OS = B
    dpm[t, 4, 2] <- 0                      #--|OS = AB
    
    # TS = B
    dpm[t, 1, 3] <- 1-pB[t]                #--|OS = U
    dpm[t, 2, 3] <- 0                      #--|OS = A
    dpm[t, 3, 3] <- pB[t]                  #--|OS = B
    dpm[t, 4, 3] <- 0                      #--|OS = AB
    
    # TS = AB
    dpm[t, 1, 4] <- (1-pA[t]) * (1-pB[t])  #--|OS = U
    dpm[t, 2, 4] <- pA[t] * (1-pB[t])      #--|OS = A
    dpm[t, 3, 4] <- (1-pA[t]) * pB[t]      #--|OS = B
    dpm[t, 4, 4] <- pA[t] * pB[t]          #--|OS = AB
    
    ## logit links for detection probs
    logit(pA[t]) <- alphaA0 
    logit(pB[t]) <- alphaB0 
    } #close time loop
    
    ## Derived parameters
    
    diff_gamA <- gamA - gamAB
    diff_gamB <- gamB - gamBA
    diff_epsA <- epsA - epsAB
    diff_epsB <- epsB - epsBA
    
    diff_GamA <- GamA - GamAB
    diff_GamB <- GamB - GamBA
    diff_EpsA <- EpsA - EpsAB
    diff_EpsB <- EpsB - EpsBA
    
    ratio_gamA <- gamA / gamAB
    ratio_gamB <- gamB / gamBA
    ratio_epsA <- epsAB / epsA
    ratio_epsB <- epsB / epsBA
    
    ratio_GamA <- GamA / GamAB
    ratio_GamB <- GamBA / GamB
    ratio_EpsA <- EpsAB / EpsA
    ratio_EpsB <- EpsB / EpsBA    
    
    }# end
    
